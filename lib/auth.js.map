{"version":3,"file":"auth.js","names":["_oauth2AuthCodePkce","require","_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","lichessHost","exports","scopes","clientId","clientUrl","url","URL","location","href","search","Auth","constructor","redraw","OAuth2AuthCodePKCE","authorizationUrl","tokenUrl","redirectUrl","onAccessTokenExpiry","refreshAccessToken","onInvalidGrant","_retry","login","oauth","fetchAuthorizationCode","init","hasAuthCode","isReturningFromAuthServer","accessContext","getAccessToken","fetch","decorateFetchHTTPClient","window","useApi","err","error","options","res"],"sources":["../source/auth.ts"],"sourcesContent":["import {\n    AccessContext,\n    HttpClient,\n    OAuth2AuthCodePKCE,\n} from \"@bity/oauth2-auth-code-pkce\";\n\nexport const lichessHost = \"https://lichess.org\";\nexport const scopes = [\n    \"preference:read\",\n    \"preference:write\",\n    \"email:read\",\n    \"engine:read\",\n    \"engine:write\",\n    \"challenge:read\",\n    \"challenge:write\",\n    \"challenge:bulk\",\n    \"study:read\",\n    \"study:write\",\n    \"tournament:write\",\n    \"racer:write\",\n    \"puzzle:read\",\n    \"team:read\",\n    \"team:write\",\n    \"team:lead\",\n    \"follow:read\",\n    \"follow:write\",\n    \"msg:write\",\n    \"board:play\",\n    \"bot:play\",\n    \"web:mod\",\n];\nexport const clientId = \"inkdrop.app\";\nexport const clientUrl = (() => {\n    const url = new URL(location.href);\n    url.search = \"\";\n    return url.href;\n})();\n\nexport class Auth {\n    oauth = new OAuth2AuthCodePKCE({\n        authorizationUrl: `${lichessHost}/oauth`,\n        tokenUrl: `${lichessHost}/api/token`,\n        clientId,\n        scopes,\n        redirectUrl: clientUrl,\n        onAccessTokenExpiry: (refreshAccessToken) => refreshAccessToken(),\n        onInvalidGrant: (_retry) => {},\n    });\n\n    error?: any;\n    accessContext?: AccessContext;\n\n    email?: string;\n\n    constructor(private redraw: () => void) {}\n\n    async login() {\n        // Redirect to authentication prompt.\n        await this.oauth.fetchAuthorizationCode();\n    }\n\n    async init() {\n        try {\n            const hasAuthCode = await this.oauth.isReturningFromAuthServer();\n            if (hasAuthCode) {\n                // Might want to persist accessContext.token until the user logs out.\n                this.accessContext = await this.oauth.getAccessToken();\n                this.redraw();\n\n                // Can also use this convenience wrapper for fetch() instead of\n                // using manually using getAccessToken() and setting the\n                // \"Authorization: Bearer ...\" header.\n                const fetch = this.oauth.decorateFetchHTTPClient(window.fetch);\n                await this.useApi(fetch);\n            }\n        } catch (err) {\n            this.error = err;\n            this.redraw();\n        }\n    }\n\n    async useApi(fetch: HttpClient, url, options) {\n        const res = await fetch(url, options);\n        this.redraw();\n    }\n\n    // async logout() {\n    //     const token = this.accessContext?.token?.value;\n    //     this.accessContext = undefined;\n    //     this.error = undefined;\n    //     this.email = undefined;\n    //     this.redraw();\n\n    //     // Example request using vanilla fetch: Revoke access token.\n    //     await fetch(`${lichessHost}/api/token`, {\n    //         method: \"DELETE\",\n    //         headers: {\n    //             Authorization: `Bearer ${token}`,\n    //         },\n    //     });\n    // }\n}\n"],"mappings":";;;;;;AAAA,IAAAA,mBAAA,GAAAC,OAAA;AAIqC,SAAAC,gBAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,YAAAD,CAAA,GAAAE,cAAA,CAAAF,CAAA,MAAAD,CAAA,GAAAI,MAAA,CAAAC,cAAA,CAAAL,CAAA,EAAAC,CAAA,IAAAK,KAAA,EAAAJ,CAAA,EAAAK,UAAA,MAAAC,YAAA,MAAAC,QAAA,UAAAT,CAAA,CAAAC,CAAA,IAAAC,CAAA,EAAAF,CAAA;AAAA,SAAAG,eAAAD,CAAA,QAAAQ,CAAA,GAAAC,YAAA,CAAAT,CAAA,uCAAAQ,CAAA,GAAAA,CAAA,GAAAA,CAAA;AAAA,SAAAC,aAAAT,CAAA,EAAAD,CAAA,2BAAAC,CAAA,KAAAA,CAAA,SAAAA,CAAA,MAAAF,CAAA,GAAAE,CAAA,CAAAU,MAAA,CAAAC,WAAA,kBAAAb,CAAA,QAAAU,CAAA,GAAAV,CAAA,CAAAc,IAAA,CAAAZ,CAAA,EAAAD,CAAA,uCAAAS,CAAA,SAAAA,CAAA,YAAAK,SAAA,yEAAAd,CAAA,GAAAe,MAAA,GAAAC,MAAA,EAAAf,CAAA;AAE9B,MAAMgB,WAAW,GAAAC,OAAA,CAAAD,WAAA,GAAG,qBAAqB;AACzC,MAAME,MAAM,GAAAD,OAAA,CAAAC,MAAA,GAAG,CAClB,iBAAiB,EACjB,kBAAkB,EAClB,YAAY,EACZ,aAAa,EACb,cAAc,EACd,gBAAgB,EAChB,iBAAiB,EACjB,gBAAgB,EAChB,YAAY,EACZ,aAAa,EACb,kBAAkB,EAClB,aAAa,EACb,aAAa,EACb,WAAW,EACX,YAAY,EACZ,WAAW,EACX,aAAa,EACb,cAAc,EACd,WAAW,EACX,YAAY,EACZ,UAAU,EACV,SAAS,CACZ;AACM,MAAMC,QAAQ,GAAAF,OAAA,CAAAE,QAAA,GAAG,aAAa;AAC9B,MAAMC,SAAS,GAAAH,OAAA,CAAAG,SAAA,GAAG,CAAC,MAAM;EAC5B,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACC,QAAQ,CAACC,IAAI,CAAC;EAClCH,GAAG,CAACI,MAAM,GAAG,EAAE;EACf,OAAOJ,GAAG,CAACG,IAAI;AACnB,CAAC,EAAE,CAAC;AAEG,MAAME,IAAI,CAAC;EAgBdC,WAAWA,CAASC,MAAkB,EAAE;IAAA,KAApBA,MAAkB,GAAlBA,MAAkB;IAAA/B,eAAA,gBAf9B,IAAIgC,sCAAkB,CAAC;MAC3BC,gBAAgB,EAAE,GAAGd,WAAW,QAAQ;MACxCe,QAAQ,EAAE,GAAGf,WAAW,YAAY;MACpCG,QAAQ;MACRD,MAAM;MACNc,WAAW,EAAEZ,SAAS;MACtBa,mBAAmB,EAAGC,kBAAkB,IAAKA,kBAAkB,CAAC,CAAC;MACjEC,cAAc,EAAGC,MAAM,IAAK,CAAC;IACjC,CAAC,CAAC;IAAAvC,eAAA;IAAAA,eAAA;IAAAA,eAAA;EAOuC;EAEzC,MAAMwC,KAAKA,CAAA,EAAG;IACV;IACA,MAAM,IAAI,CAACC,KAAK,CAACC,sBAAsB,CAAC,CAAC;EAC7C;EAEA,MAAMC,IAAIA,CAAA,EAAG;IACT,IAAI;MACA,MAAMC,WAAW,GAAG,MAAM,IAAI,CAACH,KAAK,CAACI,yBAAyB,CAAC,CAAC;MAChE,IAAID,WAAW,EAAE;QACb;QACA,IAAI,CAACE,aAAa,GAAG,MAAM,IAAI,CAACL,KAAK,CAACM,cAAc,CAAC,CAAC;QACtD,IAAI,CAAChB,MAAM,CAAC,CAAC;;QAEb;QACA;QACA;QACA,MAAMiB,KAAK,GAAG,IAAI,CAACP,KAAK,CAACQ,uBAAuB,CAACC,MAAM,CAACF,KAAK,CAAC;QAC9D,MAAM,IAAI,CAACG,MAAM,CAACH,KAAK,CAAC;MAC5B;IACJ,CAAC,CAAC,OAAOI,GAAG,EAAE;MACV,IAAI,CAACC,KAAK,GAAGD,GAAG;MAChB,IAAI,CAACrB,MAAM,CAAC,CAAC;IACjB;EACJ;EAEA,MAAMoB,MAAMA,CAACH,KAAiB,EAAExB,GAAG,EAAE8B,OAAO,EAAE;IAC1C,MAAMC,GAAG,GAAG,MAAMP,KAAK,CAACxB,GAAG,EAAE8B,OAAO,CAAC;IACrC,IAAI,CAACvB,MAAM,CAAC,CAAC;EACjB;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ;AAACX,OAAA,CAAAS,IAAA,GAAAA,IAAA","ignoreList":[]}